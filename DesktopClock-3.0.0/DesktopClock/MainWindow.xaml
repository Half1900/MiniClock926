<Window x:Class="DesktopClock.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:DesktopClock"
        xmlns:p="clr-namespace:DesktopClock.Properties"
        mc:Ignorable="d"
        Title="MiniClock"
        AllowsTransparency="True"
        Background="Transparent"
        WindowStyle="None"
        ResizeMode="NoResize"
        SizeToContent="WidthAndHeight"
        UseLayoutRounding="True"
        WindowStartupLocation="Manual"
        Topmost="{Binding TopmostEnabled,  Mode=TwoWay}"
        ShowInTaskbar="{Binding ShowInTaskbar, Source={x:Static p:Settings.Default}, Mode=TwoWay}"
        FontFamily="{Binding FontFamily, Source={x:Static p:Settings.Default}, Mode=OneWay}"
        MouseDown="Window_MouseDown"
        MouseDoubleClick="Window_MouseDoubleClick"
        MouseWheel="Window_MouseWheel"
		Loaded="MainWindow_Loaded">
    <Window.ContextMenu>
		<ContextMenu>
			<MenuItem Command="{Binding CopyToClipboardCommand}" Header="复制" />

			<Separator />

            <MenuItem Header="置顶窗口"
                      x:Name="top_most"
			          IsCheckable="True"
                      Click="Top_Most_Click"
			          IsChecked="{Binding TopmostEnabled,  Mode=TwoWay}" />
            <MenuItem Header="移动窗口"
                      x:Name="drag_move"
			          IsCheckable="True"
                      Click="Drag_Click"
			          IsChecked="{Binding DragEnabled,  Mode=TwoWay}" />            

            <MenuItem Header="开机自启动"
                      x:Name="check_auto_start"
			          IsCheckable="True"
                      Click="Check_Click"
			          IsChecked="{Binding RunOnStartup, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />


            <Separator />
            <MenuItem Header="背景不透明"
			          IsCheckable="True"
					  Click="BackgroundOpacity_Click"
			          IsChecked="{Binding BackgroundEnabled, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
            
			<MenuItem>
				<MenuItem.Header>
					<StackPanel Orientation="Horizontal">
                        <TextBlock Text="调整透明度  " />
						<Slider
							x:Name="BackgroundOpacitySlider" 
							Width="80"
						        AutoToolTipPlacement="TopLeft"
						        IsSnapToTickEnabled="True"
						        Maximum="255"
						        Minimum="1"
								ValueChanged="Slider_OpacityChanged"
						        Value="{Binding Opacity,Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
					</StackPanel>
				</MenuItem.Header>
			</MenuItem>
			<MenuItem>
				<MenuItem.Header>
					<StackPanel Orientation="Horizontal">
                        <TextBlock Text="调 整 大 小  " />
						<Slider
							x:Name="HeightSlider" 
							Width="80"
						        AutoToolTipPlacement="TopLeft"
						        IsSnapToTickEnabled="True"
						        Maximum="300"
						        Minimum="8"
								ValueChanged="Slider_SizeChanged"
						        Value="{Binding Height, Source={x:Static p:Settings.Default}, Mode=TwoWay}" />
					</StackPanel>
				</MenuItem.Header>
			</MenuItem>

			<MenuItem Header="主题设置">
				<MenuItem.ItemsSource>
					<CompositeCollection>
						<CollectionContainer Collection="{Binding Source={x:Static local:App.Themes}}" />
					</CompositeCollection>
				</MenuItem.ItemsSource>
				<MenuItem.ItemContainerStyle>
					<Style TargetType="MenuItem">
						<Setter Property="Command" Value="{Binding DataContext.SetThemeCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />
						<Setter Property="CommandParameter" Value="{Binding}" />
						<Setter Property="Header" Value="{Binding Name}" />
						<Setter Property="IsCheckable" Value="False" />
						<Setter Property="IsChecked" Value="{Binding IsSelected, Mode=OneWay}" />
					</Style>
				</MenuItem.ItemContainerStyle>
			</MenuItem>

			<MenuItem Header="时区设置" ItemsSource="{x:Static local:DateTimeUtil.TimeZones}">
				<MenuItem.Resources>
					<Style TargetType="MenuItem">
						<Setter Property="Command" Value="{Binding DataContext.SetTimeZoneCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />

						<Setter Property="CommandParameter" Value="{Binding}" />
					</Style>
				</MenuItem.Resources>
			</MenuItem>

			<MenuItem Header="日期格式" ItemsSource="{x:Static local:DateTimeUtil.DateTimeFormatsAndExamples}">
				<MenuItem.Resources>
					<Style TargetType="MenuItem">
						<Setter Property="Command" Value="{Binding DataContext.SetFormatCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}" />

						<Setter Property="CommandParameter" Value="{Binding Key}" />

						<Setter Property="DisplayMemberPath" Value="Value" />
					</Style>
				</MenuItem.Resources>
			</MenuItem>

			<Separator />
            <MenuItem Command = "{Binding NewClockCommand}" Header = "新增一个时钟" />
            <MenuItem Command="{Binding OpenSettingsCommand}" Header="打开配置文件" />
            <Separator />
            <MenuItem Header="任务栏显示"
					  IsCheckable="True"
                      x:Name="check_show_task"
                      Click="Task_Click"
					   />

            <MenuItem Command="{Binding ShowTrayCommand}" Header="托盘图标显示" 
                      IsCheckable="True"
					  x:Name="check_tray"
                      Click="Tray_Click"/>
            <Separator />
            <MenuItem Command="{Binding MiniWindowCommand}" Header="最小化窗口" />
                        
            <MenuItem Command="{Binding ExitCommand}" Header="退出" />
		</ContextMenu>
	</Window.ContextMenu>

    <Viewbox 
        x:Name="ClockViewbox" 
        Height="{Binding Height, Source={x:Static p:Settings.Default}, Mode=OneWay}">
        <Border 
            x:Name="ClockBorder" 
            CornerRadius="2" 
            Padding="1,0,1,0" 
            Visibility="Collapsed">
            <Border.Style>
                <Style TargetType="Border">
                    <Setter Property="Background" >
                        <Setter.Value>
                            <SolidColorBrush Opacity="{Binding BackgroundOpacity, Source={x:Static p:Settings.Default}, Mode=OneWay}" Color="{Binding OuterColor, Source={x:Static p:Settings.Default}, Mode=OneWay}" />
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding BackgroundEnabled, Source={x:Static p:Settings.Default}, Mode=OneWay}" Value="False">
                            <DataTrigger.Setters>
                                <Setter Property="Background" Value="Transparent" />
                            </DataTrigger.Setters>
                        </DataTrigger>
                     </Style.Triggers>
                </Style>
            </Border.Style>
            <local:OutlinedTextBlock 
		            x:Name="TimeTextBlock"
		            Margin="1,1,1,0"   
		            FontFamily="Consolas"                
		            HorizontalAlignment="Center"
		            Text="{Binding CurrentTimeOrCountdownString}"
                    TextWrapping="Wrap"
		            StrokeThickness="{Binding OutlineThickness, Source={x:Static p:Settings.Default}, Mode=OneWay}">

                <local:OutlinedTextBlock.Fill>
                    <SolidColorBrush Color="{Binding TextColor, Source={x:Static p:Settings.Default}, Mode=OneWay}" />
                </local:OutlinedTextBlock.Fill>

                <local:OutlinedTextBlock.Style>
                    <Style TargetType="local:OutlinedTextBlock">
                        <Setter Property="Stroke" Value="Transparent" />
                        <Setter Property="StrokeThickness" Value="0" />
                        <Setter Property="Margin" Value="0" />
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding BackgroundEnabled, Source={x:Static p:Settings.Default}, Mode=OneWay}" Value="False">
                                <DataTrigger.Setters>
                                    <Setter Property="Stroke">
                                        <Setter.Value>
                                            <SolidColorBrush Color="{Binding OuterColor, Source={x:Static p:Settings.Default}, Mode=OneWay}" />
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger.Setters>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </local:OutlinedTextBlock.Style>
            </local:OutlinedTextBlock>
        </Border>
    </Viewbox>
</Window>
